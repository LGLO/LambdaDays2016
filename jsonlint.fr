module JsonLint where

import Data.JSON

valid = "[1,\"ala\", {\"a\":123}]"
invalid = "[1,\"ala\", {\"a\":123]"

-- Parsing to JSON AST is enough for validation
parseToValue :: String -> Either String JSON.Value
parseToValue = parseJSON

-- alternatively:
-- parseToValue = parseJSON::(String -> Either String JSON.Value)

type Validate = String -> Either String String
--validateJson :: Validate -- optional thanks to type inference
validateJson a = case (parseToValue a) of Left err -> Left err
                                          Right v -> Right (show v)

type Validate = String -> Either String String
-- As above with 'bind' operator
validateJsonBind :: Validate
validateJsonBind a = parseToValue a >>= (\v -> Right (show v))

validateJsonDo a = do value <- parseToValue a
                      Right (show value)
                   
main = do
       println $ validateJson valid
       println $ validateJson invalid

